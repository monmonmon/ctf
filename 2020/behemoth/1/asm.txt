
behemoth1:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

080482c8 <_init>:
 80482c8:	53                   	push   ebx
 80482c9:	83 ec 08             	sub    esp,0x8
 80482cc:	e8 af 00 00 00       	call   8048380 <__x86.get_pc_thunk.bx>
 80482d1:	81 c3 5b 14 00 00    	add    ebx,0x145b
 80482d7:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80482dd:	85 c0                	test   eax,eax
 80482df:	74 05                	je     80482e6 <_init+0x1e>
 80482e1:	e8 5a 00 00 00       	call   8048340 <__gmon_start__@plt>
 80482e6:	83 c4 08             	add    esp,0x8
 80482e9:	5b                   	pop    ebx
 80482ea:	c3                   	ret

セクション .plt の逆アセンブル:

080482f0 <.plt>:
 80482f0:	ff 35 30 97 04 08    	push   DWORD PTR ds:0x8049730
 80482f6:	ff 25 34 97 04 08    	jmp    DWORD PTR ds:0x8049734
 80482fc:	00 00                	add    BYTE PTR [eax],al
	...

08048300 <printf@plt>:
 8048300:	ff 25 38 97 04 08    	jmp    DWORD PTR ds:0x8049738
 8048306:	68 00 00 00 00       	push   0x0
 804830b:	e9 e0 ff ff ff       	jmp    80482f0 <.plt>

08048310 <gets@plt>:
 8048310:	ff 25 3c 97 04 08    	jmp    DWORD PTR ds:0x804973c
 8048316:	68 08 00 00 00       	push   0x8
 804831b:	e9 d0 ff ff ff       	jmp    80482f0 <.plt>

08048320 <puts@plt>:
 8048320:	ff 25 40 97 04 08    	jmp    DWORD PTR ds:0x8049740
 8048326:	68 10 00 00 00       	push   0x10
 804832b:	e9 c0 ff ff ff       	jmp    80482f0 <.plt>

08048330 <__libc_start_main@plt>:
 8048330:	ff 25 44 97 04 08    	jmp    DWORD PTR ds:0x8049744
 8048336:	68 18 00 00 00       	push   0x18
 804833b:	e9 b0 ff ff ff       	jmp    80482f0 <.plt>

セクション .plt.got の逆アセンブル:

08048340 <__gmon_start__@plt>:
 8048340:	ff 25 28 97 04 08    	jmp    DWORD PTR ds:0x8049728
 8048346:	66 90                	xchg   ax,ax

セクション .text の逆アセンブル:

08048350 <_start>:
 8048350:	31 ed                	xor    ebp,ebp
 8048352:	5e                   	pop    esi
 8048353:	89 e1                	mov    ecx,esp
 8048355:	83 e4 f0             	and    esp,0xfffffff0
 8048358:	50                   	push   eax
 8048359:	54                   	push   esp
 804835a:	52                   	push   edx
 804835b:	68 e0 84 04 08       	push   0x80484e0
 8048360:	68 80 84 04 08       	push   0x8048480
 8048365:	51                   	push   ecx
 8048366:	56                   	push   esi
 8048367:	68 4b 84 04 08       	push   0x804844b
 804836c:	e8 bf ff ff ff       	call   8048330 <__libc_start_main@plt>
 8048371:	f4                   	hlt
 8048372:	66 90                	xchg   ax,ax
 8048374:	66 90                	xchg   ax,ax
 8048376:	66 90                	xchg   ax,ax
 8048378:	66 90                	xchg   ax,ax
 804837a:	66 90                	xchg   ax,ax
 804837c:	66 90                	xchg   ax,ax
 804837e:	66 90                	xchg   ax,ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048383:	c3                   	ret
 8048384:	66 90                	xchg   ax,ax
 8048386:	66 90                	xchg   ax,ax
 8048388:	66 90                	xchg   ax,ax
 804838a:	66 90                	xchg   ax,ax
 804838c:	66 90                	xchg   ax,ax
 804838e:	66 90                	xchg   ax,ax

08048390 <deregister_tm_clones>:
 8048390:	b8 53 97 04 08       	mov    eax,0x8049753
 8048395:	2d 50 97 04 08       	sub    eax,0x8049750
 804839a:	83 f8 06             	cmp    eax,0x6
 804839d:	76 1a                	jbe    80483b9 <deregister_tm_clones+0x29>
 804839f:	b8 00 00 00 00       	mov    eax,0x0
 80483a4:	85 c0                	test   eax,eax
 80483a6:	74 11                	je     80483b9 <deregister_tm_clones+0x29>
 80483a8:	55                   	push   ebp
 80483a9:	89 e5                	mov    ebp,esp
 80483ab:	83 ec 14             	sub    esp,0x14
 80483ae:	68 50 97 04 08       	push   0x8049750
 80483b3:	ff d0                	call   eax
 80483b5:	83 c4 10             	add    esp,0x10
 80483b8:	c9                   	leave
 80483b9:	f3 c3                	repz ret
 80483bb:	90                   	nop
 80483bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

080483c0 <register_tm_clones>:
 80483c0:	b8 50 97 04 08       	mov    eax,0x8049750
 80483c5:	2d 50 97 04 08       	sub    eax,0x8049750
 80483ca:	c1 f8 02             	sar    eax,0x2
 80483cd:	89 c2                	mov    edx,eax
 80483cf:	c1 ea 1f             	shr    edx,0x1f
 80483d2:	01 d0                	add    eax,edx
 80483d4:	d1 f8                	sar    eax,1
 80483d6:	74 1b                	je     80483f3 <register_tm_clones+0x33>
 80483d8:	ba 00 00 00 00       	mov    edx,0x0
 80483dd:	85 d2                	test   edx,edx
 80483df:	74 12                	je     80483f3 <register_tm_clones+0x33>
 80483e1:	55                   	push   ebp
 80483e2:	89 e5                	mov    ebp,esp
 80483e4:	83 ec 10             	sub    esp,0x10
 80483e7:	50                   	push   eax
 80483e8:	68 50 97 04 08       	push   0x8049750
 80483ed:	ff d2                	call   edx
 80483ef:	83 c4 10             	add    esp,0x10
 80483f2:	c9                   	leave
 80483f3:	f3 c3                	repz ret
 80483f5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 80483f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 50 97 04 08 00 	cmp    BYTE PTR ds:0x8049750,0x0
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   ebp
 804840a:	89 e5                	mov    ebp,esp
 804840c:	83 ec 08             	sub    esp,0x8
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 50 97 04 08 01 	mov    BYTE PTR ds:0x8049750,0x1
 804841b:	c9                   	leave
 804841c:	f3 c3                	repz ret
 804841e:	66 90                	xchg   ax,ax

08048420 <frame_dummy>:
 8048420:	b8 3c 96 04 08       	mov    eax,0x804963c
 8048425:	8b 10                	mov    edx,DWORD PTR [eax]
 8048427:	85 d2                	test   edx,edx
 8048429:	75 05                	jne    8048430 <frame_dummy+0x10>
 804842b:	eb 93                	jmp    80483c0 <register_tm_clones>
 804842d:	8d 76 00             	lea    esi,[esi+0x0]
 8048430:	ba 00 00 00 00       	mov    edx,0x0
 8048435:	85 d2                	test   edx,edx
 8048437:	74 f2                	je     804842b <frame_dummy+0xb>
 8048439:	55                   	push   ebp
 804843a:	89 e5                	mov    ebp,esp
 804843c:	83 ec 14             	sub    esp,0x14
 804843f:	50                   	push   eax
 8048440:	ff d2                	call   edx
 8048442:	83 c4 10             	add    esp,0x10
 8048445:	c9                   	leave
 8048446:	e9 75 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844b <main>:
 804844b:	55                   	push   ebp
 804844c:	89 e5                	mov    ebp,esp
 804844e:	83 ec 44             	sub    esp,0x44

 # printf
 8048451:	68 00 85 04 08       	push   0x8048500
 8048456:	e8 a5 fe ff ff       	call   8048300 <printf@plt>
 804845b:	83 c4 04             	add    esp,0x4

 # gets
 804845e:	8d 45 bd             	lea    eax,[ebp-0x43]       # ebp-0x43 を引数に与える
 8048461:	50                   	push   eax
 8048462:	e8 a9 fe ff ff       	call   8048310 <gets@plt>
 8048467:	83 c4 04             	add    esp,0x4

 # puts
 804846a:	68 0c 85 04 08       	push   0x804850c
 804846f:	e8 ac fe ff ff       	call   8048320 <puts@plt>
 8048474:	83 c4 04             	add    esp,0x4

 8048477:	b8 00 00 00 00       	mov    eax,0x0
 804847c:	c9                   	leave
 804847d:	c3                   	ret
 804847e:	66 90                	xchg   ax,ax

08048480 <__libc_csu_init>:
 8048480:	55                   	push   ebp
 8048481:	57                   	push   edi
 8048482:	56                   	push   esi
 8048483:	53                   	push   ebx
 8048484:	e8 f7 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 8048489:	81 c3 a3 12 00 00    	add    ebx,0x12a3
 804848f:	83 ec 0c             	sub    esp,0xc
 8048492:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 8048496:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804849c:	e8 27 fe ff ff       	call   80482c8 <_init>
 80484a1:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80484a7:	29 c6                	sub    esi,eax
 80484a9:	c1 fe 02             	sar    esi,0x2
 80484ac:	85 f6                	test   esi,esi
 80484ae:	74 25                	je     80484d5 <__libc_csu_init+0x55>
 80484b0:	31 ff                	xor    edi,edi
 80484b2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80484b8:	83 ec 04             	sub    esp,0x4
 80484bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 80484bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 80484c3:	55                   	push   ebp
 80484c4:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80484cb:	83 c7 01             	add    edi,0x1
 80484ce:	83 c4 10             	add    esp,0x10
 80484d1:	39 fe                	cmp    esi,edi
 80484d3:	75 e3                	jne    80484b8 <__libc_csu_init+0x38>
 80484d5:	83 c4 0c             	add    esp,0xc
 80484d8:	5b                   	pop    ebx
 80484d9:	5e                   	pop    esi
 80484da:	5f                   	pop    edi
 80484db:	5d                   	pop    ebp
 80484dc:	c3                   	ret
 80484dd:	8d 76 00             	lea    esi,[esi+0x0]

080484e0 <__libc_csu_fini>:
 80484e0:	f3 c3                	repz ret

セクション .fini の逆アセンブル:

080484e4 <_fini>:
 80484e4:	53                   	push   ebx
 80484e5:	83 ec 08             	sub    esp,0x8
 80484e8:	e8 93 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 80484ed:	81 c3 3f 12 00 00    	add    ebx,0x123f
 80484f3:	83 c4 08             	add    esp,0x8
 80484f6:	5b                   	pop    ebx
 80484f7:	c3                   	ret
